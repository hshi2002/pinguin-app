name: CI/CD - Pinguin

on:
  push:
    branches:
      - main

jobs:
  build-n-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 3. Install dependencies
      - name: Install dependencies
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt

      # 4. Run unit tests (app & worker)
      - name: Run unit tests
        run: |
          echo "âœ… Running simple unit tests"
          python -m unittest discover -s pinguin/app -p "*_test.py" || echo "No tests yet"

  package-e2e-publish:
    runs-on: ubuntu-latest
    needs: build-n-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 5. Build docker image
      - name: Build Docker image
        run: |
          docker build -t pinguin:test ./pinguin/app

      # 6. Run docker-compose for integration tests
      - name: API endpoint testing
        run: |
          sleep 10  # give services time to boot
          curl -f http://localhost:5000/ || exit 1
          curl -X POST -H "Content-Type: application/json" \
            -d '{"ip": "127.0.0.1"}' \
            http://localhost:5000/add || exit 1

      - name: Remove testing environment
        run: docker compose -f docker-compose.test.yml down

      # 9. Authenticate to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # 7. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 8. Build, tag, and push image
      - name: Build, tag, and push
        run: |
          IMAGE_URI=${{ secrets.ECR_REPO_URI }}:${{ github.sha }}
          docker build -t $IMAGE_URI ./pinguin/app
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: package-e2e-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 9. Authenticate to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # 10. Deploy to K8S
      - name: Update K8S deployment
        uses: azure/k8s-deploy@v4
        with:
          manifests: |
            k8s-manifests/deploy-app.yaml
          images: ${{ env.IMAGE_URI }}
          namespace: default
