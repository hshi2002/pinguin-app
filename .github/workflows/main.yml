name: CI/CD - Pinguin

on:
  push:
    branches:
      - main

jobs:
  build-n-test:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      # 3. Install dependencies
      - name: Install dependencies
        working-directory: ./app
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt

      # 4. Run unit tests (app & worker)
      - name: Run unit tests
        run: |
          echo "âœ… Running simple unit tests"
          python -m unittest discover -s pinguin/app -p "*_test.py" || echo "No tests yet"

  package-e2e-publish:
    runs-on: ubuntu-latest
    needs: build-n-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 5. Build docker image
      - name: Build Docker image
        run: |
          docker build -t pinguin:test ./app

      # 6. Set up testing environment
      - name: Set up testing environment
        run: |
          docker compose -f docker-compose.yml up -d --build

      # 6. Run docker-compose for integration tests
      - name: API endpoint testing
        run: |
          sleep 10  # give services time to boot
          curl -f http://localhost:8080/ || exit 1
          curl -X POST http://localhost:8080/api/objects \
            -H "Content-Type: application/json" \
            -d '{"name":"server1","host":"192.168.1.1","interval":45}'
            || exit 1

      - name: Remove testing environment
        run: docker compose -f docker-compose.test.yml down

      # 9. Authenticate to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # 7. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 8. Build, tag, and push image
      - name: Build, tag, and push
        run: |
          IMAGE_URI=${{ secrets.ECR_REPO_URI }}:${{ github.sha }}
          docker build -t $IMAGE_URI ./pinguin/app
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: package-e2e-publish
    steps:
      
      # Checkout infra repo to get K8s manifests
      - name: Checkout infra repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.INFRA_GIT_REPO }}
          path: pinguin-infra

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      # 10. Deploy to K8S
      - name: Deploy to EKS
        run: |
          IMAGE_URI=${{ secrets.ECR_REPO_URI }}:${{ github.sha }}

          kubectl set image deployment/pinguin-app pinguin-app=$IMAGE_URI -n default
          kubectl rollout status deployment/pinguin-app -n default

          kubectl set image deployment/pinguin-worker pinguin-worker=$IMAGE_URI -n default
          kubectl rollout status deployment/pinguin-worker -n default
